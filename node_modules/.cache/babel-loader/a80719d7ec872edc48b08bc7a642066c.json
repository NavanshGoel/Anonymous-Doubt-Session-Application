{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst idlUtils = require(\"../generated/utils.js\");\n\nconst ValidityState = require(\"../generated/ValidityState\");\n\nconst DefaultConstraintValidationImpl = require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\n\nconst {\n  mixin\n} = require(\"../../utils\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst NODE_TYPE = require(\"../node-type\");\n\nconst HTMLCollection = require(\"../generated/HTMLCollection\");\n\nconst HTMLOptionsCollection = require(\"../generated/HTMLOptionsCollection\");\n\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\n\nconst {\n  getLabelsForLabelable,\n  formOwner,\n  isDisabled\n} = require(\"../helpers/form-controls\");\n\nconst {\n  parseNonNegativeInteger\n} = require(\"../helpers/strings\");\n\nclass HTMLSelectElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n    this._options = HTMLOptionsCollection.createImpl(this._globalObject, [], {\n      element: this,\n      query: () => {\n        // Customized domSymbolTree.treeToArray() clone.\n        const array = [];\n\n        for (const child of domSymbolTree.childrenIterator(this)) {\n          if (child._localName === \"option\") {\n            array.push(child);\n          } else if (child._localName === \"optgroup\") {\n            for (const childOfGroup of domSymbolTree.childrenIterator(child)) {\n              if (childOfGroup._localName === \"option\") {\n                array.push(childOfGroup);\n              }\n            }\n          }\n        }\n\n        return array;\n      }\n    });\n    this._selectedOptions = null; // lazy\n\n    this._customValidityErrorMessage = \"\";\n    this._labels = null;\n  }\n\n  _formReset() {\n    for (const option of this.options) {\n      option._selectedness = option.hasAttributeNS(null, \"selected\");\n      option._dirtyness = false;\n    }\n\n    this._askedForAReset();\n  }\n\n  _askedForAReset() {\n    if (this.hasAttributeNS(null, \"multiple\")) {\n      return;\n    }\n\n    const selected = this.options.filter(opt => opt._selectedness);\n    const size = this._displaySize;\n\n    if (size === 1 && !selected.length) {\n      // select the first option that is not disabled\n      for (const option of this.options) {\n        let disabled = option.hasAttributeNS(null, \"disabled\");\n        const parentNode = domSymbolTree.parent(option);\n\n        if (parentNode && parentNode.nodeName.toUpperCase() === \"OPTGROUP\" && parentNode.hasAttributeNS(null, \"disabled\")) {\n          disabled = true;\n        }\n\n        if (!disabled) {\n          // (do not set dirty)\n          option._selectedness = true;\n          break;\n        }\n      }\n    } else if (selected.length >= 2) {\n      // select the last selected option\n      selected.forEach((option, index) => {\n        option._selectedness = index === selected.length - 1;\n      });\n    }\n  }\n\n  _descendantAdded(parent, child) {\n    if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n      this._askedForAReset();\n    }\n\n    super._descendantAdded(parent, child);\n  }\n\n  _descendantRemoved(parent, child) {\n    if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n      this._askedForAReset();\n    }\n\n    super._descendantRemoved(parent, child);\n  }\n\n  _attrModified(name, value, oldValue) {\n    if (name === \"multiple\" || name === \"size\") {\n      this._askedForAReset();\n    }\n\n    super._attrModified(name, value, oldValue);\n  }\n\n  get _displaySize() {\n    if (this.hasAttributeNS(null, \"size\")) {\n      const size = parseNonNegativeInteger(this.getAttributeNS(null, \"size\"));\n\n      if (size !== null) {\n        return size;\n      }\n    }\n\n    return this.hasAttributeNS(null, \"multiple\") ? 4 : 1;\n  }\n\n  get _mutable() {\n    return !isDisabled(this);\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  get selectedOptions() {\n    return HTMLCollection.createImpl(this._globalObject, [], {\n      element: this,\n      query: () => domSymbolTree.treeToArray(this, {\n        filter: node => node._localName === \"option\" && node._selectedness === true\n      })\n    });\n  }\n\n  get selectedIndex() {\n    for (let i = 0; i < this.options.length; i++) {\n      if (this.options.item(i)._selectedness) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  set selectedIndex(index) {\n    for (let i = 0; i < this.options.length; i++) {\n      this.options.item(i)._selectedness = false;\n    }\n\n    const selectedOption = this.options.item(index);\n\n    if (selectedOption) {\n      selectedOption._selectedness = true;\n      selectedOption._dirtyness = true;\n    }\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get value() {\n    for (const option of this.options) {\n      if (option._selectedness) {\n        return option.value;\n      }\n    }\n\n    return \"\";\n  }\n\n  set value(val) {\n    for (const option of this.options) {\n      if (option.value === val) {\n        option._selectedness = true;\n        option._dirtyness = true;\n      } else {\n        option._selectedness = false;\n      }\n\n      option._modified();\n    }\n  }\n\n  get form() {\n    return formOwner(this);\n  }\n\n  get type() {\n    return this.hasAttributeNS(null, \"multiple\") ? \"select-multiple\" : \"select-one\";\n  }\n\n  get [idlUtils.supportedPropertyIndices]() {\n    return this.options[idlUtils.supportedPropertyIndices];\n  }\n\n  get length() {\n    return this.options.length;\n  }\n\n  set length(value) {\n    this.options.length = value;\n  }\n\n  item(index) {\n    return this.options.item(index);\n  }\n\n  namedItem(name) {\n    return this.options.namedItem(name);\n  }\n\n  [idlUtils.indexedSetNew](index, value) {\n    return this.options[idlUtils.indexedSetNew](index, value);\n  }\n\n  [idlUtils.indexedSetExisting](index, value) {\n    return this.options[idlUtils.indexedSetExisting](index, value);\n  }\n\n  add(opt, before) {\n    this.options.add(opt, before);\n  }\n\n  remove(index) {\n    if (arguments.length > 0) {\n      index = conversions.long(index, {\n        context: \"Failed to execute 'remove' on 'HTMLSelectElement': parameter 1\"\n      });\n      this.options.remove(index);\n    } else {\n      super.remove();\n    }\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    return this.hasAttributeNS(null, \"readonly\");\n  } // Constraint validation: If the element has its required attribute specified,\n  // and either none of the option elements in the select element's list of options\n  // have their selectedness set to true, or the only option element in the select\n  // element's list of options with its selectedness set to true is the placeholder\n  // label option, then the element is suffering from being missing.\n\n\n  get validity() {\n    if (!this._validity) {\n      const state = {\n        valueMissing: () => {\n          if (!this.hasAttributeNS(null, \"required\")) {\n            return false;\n          }\n\n          const selectedOptionIndex = this.selectedIndex;\n          return selectedOptionIndex < 0 || selectedOptionIndex === 0 && this._hasPlaceholderOption;\n        }\n      };\n      this._validity = ValidityState.createImpl(this._globalObject, [], {\n        element: this,\n        state\n      });\n    }\n\n    return this._validity;\n  } // If a select element has a required attribute specified, does not have a multiple attribute\n  // specified, and has a display size of 1; and if the value of the first option element in the\n  // select element's list of options (if any) is the empty string, and that option element's parent\n  // node is the select element(and not an optgroup element), then that option is the select\n  // element's placeholder label option.\n  // https://html.spec.whatwg.org/multipage/form-elements.html#placeholder-label-option\n\n\n  get _hasPlaceholderOption() {\n    return this.hasAttributeNS(null, \"required\") && !this.hasAttributeNS(null, \"multiple\") && this._displaySize === 1 && this.options.length > 0 && this.options.item(0).value === \"\" && this.options.item(0).parentNode._localName !== \"optgroup\";\n  }\n\n}\n\nmixin(HTMLSelectElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\nmodule.exports = {\n  implementation: HTMLSelectElementImpl\n};","map":{"version":3,"sources":["/Users/kanavmittal/Downloads/Anonymous-Doubt-Session-Application-Ashank-App/node_modules/jsdom/lib/jsdom/living/nodes/HTMLSelectElement-impl.js"],"names":["conversions","require","idlUtils","ValidityState","DefaultConstraintValidationImpl","implementation","mixin","HTMLElementImpl","NODE_TYPE","HTMLCollection","HTMLOptionsCollection","domSymbolTree","getLabelsForLabelable","formOwner","isDisabled","parseNonNegativeInteger","HTMLSelectElementImpl","constructor","globalObject","args","privateData","_options","createImpl","_globalObject","element","query","array","child","childrenIterator","_localName","push","childOfGroup","_selectedOptions","_customValidityErrorMessage","_labels","_formReset","option","options","_selectedness","hasAttributeNS","_dirtyness","_askedForAReset","selected","filter","opt","size","_displaySize","length","disabled","parentNode","parent","nodeName","toUpperCase","forEach","index","_descendantAdded","nodeType","ELEMENT_NODE","_descendantRemoved","_attrModified","name","value","oldValue","getAttributeNS","_mutable","selectedOptions","treeToArray","node","selectedIndex","i","item","selectedOption","labels","val","_modified","form","type","supportedPropertyIndices","namedItem","indexedSetNew","indexedSetExisting","add","before","remove","arguments","long","context","_barredFromConstraintValidationSpecialization","validity","_validity","state","valueMissing","selectedOptionIndex","_hasPlaceholderOption","prototype","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst idlUtils = require(\"../generated/utils.js\");\nconst ValidityState = require(\"../generated/ValidityState\");\nconst DefaultConstraintValidationImpl =\n  require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\nconst { mixin } = require(\"../../utils\");\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst NODE_TYPE = require(\"../node-type\");\nconst HTMLCollection = require(\"../generated/HTMLCollection\");\nconst HTMLOptionsCollection = require(\"../generated/HTMLOptionsCollection\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst { getLabelsForLabelable, formOwner, isDisabled } = require(\"../helpers/form-controls\");\nconst { parseNonNegativeInteger } = require(\"../helpers/strings\");\n\nclass HTMLSelectElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n    this._options = HTMLOptionsCollection.createImpl(this._globalObject, [], {\n      element: this,\n      query: () => {\n        // Customized domSymbolTree.treeToArray() clone.\n        const array = [];\n        for (const child of domSymbolTree.childrenIterator(this)) {\n          if (child._localName === \"option\") {\n            array.push(child);\n          } else if (child._localName === \"optgroup\") {\n            for (const childOfGroup of domSymbolTree.childrenIterator(child)) {\n              if (childOfGroup._localName === \"option\") {\n                array.push(childOfGroup);\n              }\n            }\n          }\n        }\n        return array;\n      }\n    });\n    this._selectedOptions = null; // lazy\n\n    this._customValidityErrorMessage = \"\";\n\n    this._labels = null;\n  }\n\n  _formReset() {\n    for (const option of this.options) {\n      option._selectedness = option.hasAttributeNS(null, \"selected\");\n      option._dirtyness = false;\n    }\n    this._askedForAReset();\n  }\n\n  _askedForAReset() {\n    if (this.hasAttributeNS(null, \"multiple\")) {\n      return;\n    }\n\n    const selected = this.options.filter(opt => opt._selectedness);\n\n    const size = this._displaySize;\n    if (size === 1 && !selected.length) {\n      // select the first option that is not disabled\n      for (const option of this.options) {\n        let disabled = option.hasAttributeNS(null, \"disabled\");\n        const parentNode = domSymbolTree.parent(option);\n        if (parentNode &&\n          parentNode.nodeName.toUpperCase() === \"OPTGROUP\" &&\n          parentNode.hasAttributeNS(null, \"disabled\")) {\n          disabled = true;\n        }\n\n        if (!disabled) {\n          // (do not set dirty)\n          option._selectedness = true;\n          break;\n        }\n      }\n    } else if (selected.length >= 2) {\n      // select the last selected option\n      selected.forEach((option, index) => {\n        option._selectedness = index === selected.length - 1;\n      });\n    }\n  }\n\n  _descendantAdded(parent, child) {\n    if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n      this._askedForAReset();\n    }\n\n    super._descendantAdded(parent, child);\n  }\n\n  _descendantRemoved(parent, child) {\n    if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n      this._askedForAReset();\n    }\n\n    super._descendantRemoved(parent, child);\n  }\n\n  _attrModified(name, value, oldValue) {\n    if (name === \"multiple\" || name === \"size\") {\n      this._askedForAReset();\n    }\n    super._attrModified(name, value, oldValue);\n  }\n\n  get _displaySize() {\n    if (this.hasAttributeNS(null, \"size\")) {\n      const size = parseNonNegativeInteger(this.getAttributeNS(null, \"size\"));\n      if (size !== null) {\n        return size;\n      }\n    }\n    return this.hasAttributeNS(null, \"multiple\") ? 4 : 1;\n  }\n\n  get _mutable() {\n    return !isDisabled(this);\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  get selectedOptions() {\n    return HTMLCollection.createImpl(this._globalObject, [], {\n      element: this,\n      query: () => domSymbolTree.treeToArray(this, {\n        filter: node => node._localName === \"option\" && node._selectedness === true\n      })\n    });\n  }\n\n  get selectedIndex() {\n    for (let i = 0; i < this.options.length; i++) {\n      if (this.options.item(i)._selectedness) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  set selectedIndex(index) {\n    for (let i = 0; i < this.options.length; i++) {\n      this.options.item(i)._selectedness = false;\n    }\n\n    const selectedOption = this.options.item(index);\n    if (selectedOption) {\n      selectedOption._selectedness = true;\n      selectedOption._dirtyness = true;\n    }\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get value() {\n    for (const option of this.options) {\n      if (option._selectedness) {\n        return option.value;\n      }\n    }\n\n    return \"\";\n  }\n\n  set value(val) {\n    for (const option of this.options) {\n      if (option.value === val) {\n        option._selectedness = true;\n        option._dirtyness = true;\n      } else {\n        option._selectedness = false;\n      }\n\n      option._modified();\n    }\n  }\n\n  get form() {\n    return formOwner(this);\n  }\n\n  get type() {\n    return this.hasAttributeNS(null, \"multiple\") ? \"select-multiple\" : \"select-one\";\n  }\n\n  get [idlUtils.supportedPropertyIndices]() {\n    return this.options[idlUtils.supportedPropertyIndices];\n  }\n\n  get length() {\n    return this.options.length;\n  }\n\n  set length(value) {\n    this.options.length = value;\n  }\n\n  item(index) {\n    return this.options.item(index);\n  }\n\n  namedItem(name) {\n    return this.options.namedItem(name);\n  }\n\n  [idlUtils.indexedSetNew](index, value) {\n    return this.options[idlUtils.indexedSetNew](index, value);\n  }\n\n  [idlUtils.indexedSetExisting](index, value) {\n    return this.options[idlUtils.indexedSetExisting](index, value);\n  }\n\n  add(opt, before) {\n    this.options.add(opt, before);\n  }\n\n  remove(index) {\n    if (arguments.length > 0) {\n      index = conversions.long(index, {\n        context: \"Failed to execute 'remove' on 'HTMLSelectElement': parameter 1\"\n      });\n      this.options.remove(index);\n    } else {\n      super.remove();\n    }\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    return this.hasAttributeNS(null, \"readonly\");\n  }\n\n  // Constraint validation: If the element has its required attribute specified,\n  // and either none of the option elements in the select element's list of options\n  // have their selectedness set to true, or the only option element in the select\n  // element's list of options with its selectedness set to true is the placeholder\n  // label option, then the element is suffering from being missing.\n  get validity() {\n    if (!this._validity) {\n      const state = {\n        valueMissing: () => {\n          if (!this.hasAttributeNS(null, \"required\")) {\n            return false;\n          }\n          const selectedOptionIndex = this.selectedIndex;\n          return selectedOptionIndex < 0 || (selectedOptionIndex === 0 && this._hasPlaceholderOption);\n        }\n      };\n\n      this._validity = ValidityState.createImpl(this._globalObject, [], {\n        element: this,\n        state\n      });\n    }\n    return this._validity;\n  }\n\n  // If a select element has a required attribute specified, does not have a multiple attribute\n  // specified, and has a display size of 1; and if the value of the first option element in the\n  // select element's list of options (if any) is the empty string, and that option element's parent\n  // node is the select element(and not an optgroup element), then that option is the select\n  // element's placeholder label option.\n  // https://html.spec.whatwg.org/multipage/form-elements.html#placeholder-label-option\n  get _hasPlaceholderOption() {\n    return this.hasAttributeNS(null, \"required\") && !this.hasAttributeNS(null, \"multiple\") &&\n      this._displaySize === 1 && this.options.length > 0 && this.options.item(0).value === \"\" &&\n      this.options.item(0).parentNode._localName !== \"optgroup\";\n  }\n}\n\nmixin(HTMLSelectElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\n\nmodule.exports = {\n  implementation: HTMLSelectElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}