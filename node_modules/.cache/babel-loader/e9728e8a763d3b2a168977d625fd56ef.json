{"ast":null,"code":"var _jsxFileName = \"/Users/kanavmittal/Downloads/Anonymous-Doubt-Session-Application-Ashank-App/src/components/SpeechToText/SpeechToText.jsx\";\nimport React, { Component } from \"react\";\nimport SpeechToText from \"speech-to-text\";\nimport supportedLanguages from \"./supportedLanguages\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport translate from \"@vitalets/google-translate-api\";\nimport { Paper, Button, Typography, Table, TableBody, TableCell, TableHead, TableRow, Grid, AppBar, Toolbar, FormControl, InputLabel, Select, MenuItem, FormHelperText } from \"@material-ui/core\";\nimport withWidth, { isWidthUp } from \"@material-ui/core/withWidth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst styles = theme => ({\n  root: {\n    paddingTop: 65,\n    paddingLeft: 11,\n    paddingRight: 11\n  },\n  flex: {\n    flex: 1\n  },\n  grow: {\n    flexGrow: 1\n  },\n  paper: theme.mixins.gutters({\n    paddingTop: 22,\n    paddingBottom: 22\n  })\n});\n\nclass SpeechToTextDemo extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      error: \"\",\n      interimText: \"\",\n      finalisedText: [],\n      listening: false,\n      language: \"en-US\"\n    };\n\n    this.onAnythingSaid = text => {\n      this.setState({\n        interimText: text\n      });\n    };\n\n    this.onEndEvent = () => {\n      if (!isWidthUp(\"sm\", this.props.width)) {\n        this.setState({\n          listening: false\n        });\n      } else if (this.state.listening) {\n        this.startListening();\n      }\n    };\n\n    this.onFinalised = text => {\n      var text1;\n      translate(text, {\n        from: \"hi\",\n        to: \"en\"\n      }).then(res => {\n        text1 = res.text;\n      }).catch(err => {\n        console.error(err);\n      });\n      this.setState({\n        finalisedText: [text1, ...this.state.finalisedText],\n        interimText: \"\"\n      });\n    };\n\n    this.startListening = () => {\n      try {\n        this.listener = new SpeechToText(this.onFinalised, this.onEndEvent, this.onAnythingSaid, this.state.language);\n        this.listener.startListening();\n        this.setState({\n          listening: true\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.stopListening = () => {\n      this.listener.stopListening();\n      this.setState({\n        listening: false\n      });\n    };\n  }\n\n  render() {\n    const {\n      error,\n      interimText,\n      finalisedText,\n      listening,\n      language\n    } = this.state;\n    const {\n      classes\n    } = this.props;\n    let content;\n\n    if (error) {\n      console.log(error);\n    } else {\n      let buttonForListening;\n\n      if (listening) {\n        buttonForListening = /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => this.stopListening(),\n          children: \"Stop Listening\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this);\n      } else {\n        buttonForListening = /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => this.startListening(),\n          variant: \"contained\",\n          children: \"Start Listening\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this);\n      }\n\n      content = /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 16,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 12,\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            className: this.props.classes.paper,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 16,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                lg: 6,\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"overline\",\n                  gutterBottom: true,\n                  children: [\"Status: \", listening ? \"listening...\" : \"finished listening\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 19\n                }, this), buttonForListening]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                lg: 6,\n                children: /*#__PURE__*/_jsxDEV(FormControl, {\n                  className: classes.formControl,\n                  children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                    children: \"Language\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 141,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Select, {\n                    value: language,\n                    onChange: evt => this.setState({\n                      language: evt.target.value\n                    }),\n                    disabled: listening,\n                    children: supportedLanguages.map(language => /*#__PURE__*/_jsxDEV(MenuItem, {\n                      value: language[1],\n                      children: language[0]\n                    }, language[1], false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 150,\n                      columnNumber: 25\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 142,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n                    children: \"What language are you going to speak in?\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 155,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            className: classes.table,\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Finalised Text\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 168,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: /*#__PURE__*/_jsxDEV(TableCell, {\n                  component: \"th\",\n                  scope: \"row\",\n                  children: finalisedText[0]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 173,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nexport default withWidth()(withStyles(styles)(SpeechToTextDemo));","map":{"version":3,"sources":["/Users/kanavmittal/Downloads/Anonymous-Doubt-Session-Application-Ashank-App/src/components/SpeechToText/SpeechToText.jsx"],"names":["React","Component","SpeechToText","supportedLanguages","withStyles","translate","Paper","Button","Typography","Table","TableBody","TableCell","TableHead","TableRow","Grid","AppBar","Toolbar","FormControl","InputLabel","Select","MenuItem","FormHelperText","withWidth","isWidthUp","styles","theme","root","paddingTop","paddingLeft","paddingRight","flex","grow","flexGrow","paper","mixins","gutters","paddingBottom","SpeechToTextDemo","state","error","interimText","finalisedText","listening","language","onAnythingSaid","text","setState","onEndEvent","props","width","startListening","onFinalised","text1","from","to","then","res","catch","err","console","listener","log","stopListening","render","classes","content","buttonForListening","formControl","evt","target","value","map","table"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SpeechToText from \"speech-to-text\";\nimport supportedLanguages from \"./supportedLanguages\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport translate from \"@vitalets/google-translate-api\";\nimport {\n  Paper,\n  Button,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Grid,\n  AppBar,\n  Toolbar,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  FormHelperText,\n} from \"@material-ui/core\";\nimport withWidth, { isWidthUp } from \"@material-ui/core/withWidth\";\n\nconst styles = (theme) => ({\n  root: {\n    paddingTop: 65,\n    paddingLeft: 11,\n    paddingRight: 11,\n  },\n  flex: {\n    flex: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  paper: theme.mixins.gutters({\n    paddingTop: 22,\n    paddingBottom: 22,\n  }),\n});\n\nclass SpeechToTextDemo extends Component {\n  state = {\n    error: \"\",\n    interimText: \"\",\n    finalisedText: [],\n    listening: false,\n    language: \"en-US\",\n  };\n\n  onAnythingSaid = (text) => {\n    this.setState({ interimText: text });\n  };\n\n  onEndEvent = () => {\n    if (!isWidthUp(\"sm\", this.props.width)) {\n      this.setState({ listening: false });\n    } else if (this.state.listening) {\n      this.startListening();\n    }\n  };\n\n  onFinalised = (text) => {\n    var text1;\n    translate(text, { from: \"hi\", to: \"en\" })\n      .then((res) => {\n        text1 = res.text;\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n\n    this.setState({\n      finalisedText: [text1, ...this.state.finalisedText],\n      interimText: \"\",\n    });\n  };\n\n  startListening = () => {\n    try {\n      this.listener = new SpeechToText(\n        this.onFinalised,\n        this.onEndEvent,\n        this.onAnythingSaid,\n        this.state.language\n      );\n      this.listener.startListening();\n      this.setState({ listening: true });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  stopListening = () => {\n    this.listener.stopListening();\n    this.setState({ listening: false });\n  };\n\n  render() {\n    const {\n      error,\n      interimText,\n      finalisedText,\n      listening,\n      language,\n    } = this.state;\n    const { classes } = this.props;\n    let content;\n    if (error) {\n      console.log(error);\n    } else {\n      let buttonForListening;\n\n      if (listening) {\n        buttonForListening = (\n          <Button onClick={() => this.stopListening()}>Stop Listening</Button>\n        );\n      } else {\n        buttonForListening = (\n          <Button onClick={() => this.startListening()} variant=\"contained\">\n            Start Listening\n          </Button>\n        );\n      }\n      content = (\n        <Grid container spacing={16}>\n          <Grid item xs={12} md={12}>\n            <Paper className={this.props.classes.paper}>\n              <Grid container spacing={16}>\n                <Grid item xs={12} lg={6}>\n                  <Typography variant=\"overline\" gutterBottom>\n                    Status: {listening ? \"listening...\" : \"finished listening\"}\n                  </Typography>\n                  <br />\n                  {buttonForListening}\n                </Grid>\n                <Grid item xs={12} lg={6}>\n                  <FormControl className={classes.formControl}>\n                    <InputLabel>Language</InputLabel>\n                    <Select\n                      value={language}\n                      onChange={(evt) =>\n                        this.setState({ language: evt.target.value })\n                      }\n                      disabled={listening}\n                    >\n                      {supportedLanguages.map((language) => (\n                        <MenuItem key={language[1]} value={language[1]}>\n                          {language[0]}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                    <FormHelperText>\n                      What language are you going to speak in?\n                    </FormHelperText>\n                  </FormControl>\n                </Grid>\n              </Grid>\n            </Paper>\n          </Grid>\n\n          <Grid item xs={12}>\n            <Table className={classes.table}>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Finalised Text</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                <TableRow>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {finalisedText[0]}\n                  </TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </Grid>\n        </Grid>\n      );\n    }\n    return <Grid container>{content}</Grid>;\n  }\n}\nexport default withWidth()(withStyles(styles)(SpeechToTextDemo));\n"]},"metadata":{},"sourceType":"module"}