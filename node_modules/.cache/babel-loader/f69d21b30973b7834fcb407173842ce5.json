{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar SpeechToText = /*#__PURE__*/function () {\n  /*\n  This module is largely inspired by this article:\n  https://developers.google.com/web/updates/2013/01/Voice-Driven-Web-Apps-Introduction-to-the-Web-Speech-API\n  \n  Arguments for the constructor:\n     - onFinalised - a callback that will be passed the finalised transcription from the cloud. Slow, but accuate.\n    - onEndEvent - a callback that will be called when the end event is fired (speech recognition engine disconnects).\n    - onAnythingSaid - a callback that will be passed interim transcriptions. Fairly immediate, but less accurate than finalised text.\n    - language - the language to interpret against. Default is US English.\n     */\n  function SpeechToText(onFinalised, onEndEvent, onAnythingSaid) {\n    var _this = this;\n\n    var language = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'en-US';\n\n    _classCallCheck(this, SpeechToText); // Check to see if this browser supports speech recognition\n    // https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition#Browser_compatibility\n\n\n    if (!('webkitSpeechRecognition' in window)) {\n      throw new Error(\"This browser doesn't support speech recognition. Try Google Chrome.\");\n    }\n\n    var SpeechRecognition = window.webkitSpeechRecognition;\n    this.recognition = new SpeechRecognition(); // set interim results to be returned if a callback for it has been passed in\n\n    this.recognition.interimResults = !!onAnythingSaid;\n    this.recognition.lang = language;\n    var finalTranscript = ''; // process both interim and finalised results\n\n    this.recognition.onresult = function (event) {\n      var interimTranscript = ''; // concatenate all the transcribed pieces together (SpeechRecognitionResult)\n\n      for (var i = event.resultIndex; i < event.results.length; i += 1) {\n        var transcriptionPiece = event.results[i][0].transcript; // check for a finalised transciption in the cloud\n\n        if (event.results[i].isFinal) {\n          finalTranscript += transcriptionPiece;\n          onFinalised(finalTranscript);\n          finalTranscript = '';\n        } else if (_this.recognition.interimResults) {\n          interimTranscript += transcriptionPiece;\n          onAnythingSaid(interimTranscript);\n        }\n      }\n    };\n\n    this.recognition.onend = function () {\n      onEndEvent();\n    };\n  }\n\n  _createClass(SpeechToText, [{\n    key: \"startListening\",\n    value: function startListening() {\n      this.recognition.start();\n    }\n  }, {\n    key: \"stopListening\",\n    value: function stopListening() {\n      this.recognition.stop();\n    }\n  }]);\n\n  return SpeechToText;\n}();\n\nexports.default = SpeechToText;","map":{"version":3,"sources":["/Users/kanavmittal/Downloads/Anonymous-Doubt-Session-Application-Ashank-App/node_modules/speech-to-text/lib/index.js"],"names":["Object","defineProperty","exports","value","default","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","_createClass","protoProps","staticProps","prototype","SpeechToText","onFinalised","onEndEvent","onAnythingSaid","_this","language","arguments","undefined","window","Error","SpeechRecognition","webkitSpeechRecognition","recognition","interimResults","lang","finalTranscript","onresult","event","interimTranscript","resultIndex","results","transcriptionPiece","transcript","isFinal","onend","startListening","start","stopListening","stop"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar SpeechToText =\n/*#__PURE__*/\nfunction () {\n  /*\n  This module is largely inspired by this article:\n  https://developers.google.com/web/updates/2013/01/Voice-Driven-Web-Apps-Introduction-to-the-Web-Speech-API\n  \n  Arguments for the constructor:\n     - onFinalised - a callback that will be passed the finalised transcription from the cloud. Slow, but accuate.\n    - onEndEvent - a callback that will be called when the end event is fired (speech recognition engine disconnects).\n    - onAnythingSaid - a callback that will be passed interim transcriptions. Fairly immediate, but less accurate than finalised text.\n    - language - the language to interpret against. Default is US English.\n     */\n  function SpeechToText(onFinalised, onEndEvent, onAnythingSaid) {\n    var _this = this;\n\n    var language = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'en-US';\n\n    _classCallCheck(this, SpeechToText);\n\n    // Check to see if this browser supports speech recognition\n    // https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition#Browser_compatibility\n    if (!('webkitSpeechRecognition' in window)) {\n      throw new Error(\"This browser doesn't support speech recognition. Try Google Chrome.\");\n    }\n\n    var SpeechRecognition = window.webkitSpeechRecognition;\n    this.recognition = new SpeechRecognition(); // set interim results to be returned if a callback for it has been passed in\n\n    this.recognition.interimResults = !!onAnythingSaid;\n    this.recognition.lang = language;\n    var finalTranscript = ''; // process both interim and finalised results\n\n    this.recognition.onresult = function (event) {\n      var interimTranscript = ''; // concatenate all the transcribed pieces together (SpeechRecognitionResult)\n\n      for (var i = event.resultIndex; i < event.results.length; i += 1) {\n        var transcriptionPiece = event.results[i][0].transcript; // check for a finalised transciption in the cloud\n\n        if (event.results[i].isFinal) {\n          finalTranscript += transcriptionPiece;\n          onFinalised(finalTranscript);\n          finalTranscript = '';\n        } else if (_this.recognition.interimResults) {\n          interimTranscript += transcriptionPiece;\n          onAnythingSaid(interimTranscript);\n        }\n      }\n    };\n\n    this.recognition.onend = function () {\n      onEndEvent();\n    };\n  }\n\n  _createClass(SpeechToText, [{\n    key: \"startListening\",\n    value: function startListening() {\n      this.recognition.start();\n    }\n  }, {\n    key: \"stopListening\",\n    value: function stopListening() {\n      this.recognition.stop();\n    }\n  }]);\n\n  return SpeechToText;\n}();\n\nexports.default = SpeechToText;"]},"metadata":{},"sourceType":"script"}