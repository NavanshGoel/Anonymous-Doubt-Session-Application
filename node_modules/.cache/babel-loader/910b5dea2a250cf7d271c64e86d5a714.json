{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nexports.convert = (value, {\n  context = \"The provided value\"\n} = {}) => {\n  function invokeTheCallbackFunction(event) {\n    if (new.target !== undefined) {\n      throw new Error(\"Internal error: invokeTheCallbackFunction is not a constructor\");\n    }\n\n    const thisArg = utils.tryWrapperForImpl(this);\n    let callResult;\n\n    if (typeof value === \"function\") {\n      event = utils.tryWrapperForImpl(event);\n      callResult = Reflect.apply(value, thisArg, [event]);\n    }\n\n    if (callResult === null || callResult === undefined) {\n      callResult = null;\n    } else {\n      callResult = conversions[\"DOMString\"](callResult, {\n        context: context\n      });\n    }\n\n    return callResult;\n  }\n\n  invokeTheCallbackFunction.construct = event => {\n    event = utils.tryWrapperForImpl(event);\n    let callResult = Reflect.construct(value, [event]);\n\n    if (callResult === null || callResult === undefined) {\n      callResult = null;\n    } else {\n      callResult = conversions[\"DOMString\"](callResult, {\n        context: context\n      });\n    }\n\n    return callResult;\n  };\n\n  invokeTheCallbackFunction[utils.wrapperSymbol] = value;\n  invokeTheCallbackFunction.objectReference = value;\n  return invokeTheCallbackFunction;\n};","map":{"version":3,"sources":["/Users/kanavmittal/Downloads/Anonymous-Doubt-Session-Application-Ashank-App/node_modules/jsdom/lib/jsdom/living/generated/OnBeforeUnloadEventHandlerNonNull.js"],"names":["conversions","require","utils","exports","convert","value","context","invokeTheCallbackFunction","event","new","target","undefined","Error","thisArg","tryWrapperForImpl","callResult","Reflect","apply","construct","wrapperSymbol","objectReference"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,oBAAD,CAA3B;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,YAAD,CAArB;;AAEAE,OAAO,CAACC,OAAR,GAAkB,CAACC,KAAD,EAAQ;AAAEC,EAAAA,OAAO,GAAG;AAAZ,IAAqC,EAA7C,KAAoD;AACpE,WAASC,yBAAT,CAAmCC,KAAnC,EAA0C;AACxC,QAAIC,GAAG,CAACC,MAAJ,KAAeC,SAAnB,EAA8B;AAC5B,YAAM,IAAIC,KAAJ,CAAU,gEAAV,CAAN;AACD;;AAED,UAAMC,OAAO,GAAGX,KAAK,CAACY,iBAAN,CAAwB,IAAxB,CAAhB;AACA,QAAIC,UAAJ;;AAEA,QAAI,OAAOV,KAAP,KAAiB,UAArB,EAAiC;AAC/BG,MAAAA,KAAK,GAAGN,KAAK,CAACY,iBAAN,CAAwBN,KAAxB,CAAR;AAEAO,MAAAA,UAAU,GAAGC,OAAO,CAACC,KAAR,CAAcZ,KAAd,EAAqBQ,OAArB,EAA8B,CAACL,KAAD,CAA9B,CAAb;AACD;;AAED,QAAIO,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAKJ,SAA1C,EAAqD;AACnDI,MAAAA,UAAU,GAAG,IAAb;AACD,KAFD,MAEO;AACLA,MAAAA,UAAU,GAAGf,WAAW,CAAC,WAAD,CAAX,CAAyBe,UAAzB,EAAqC;AAAET,QAAAA,OAAO,EAAEA;AAAX,OAArC,CAAb;AACD;;AACD,WAAOS,UAAP;AACD;;AAEDR,EAAAA,yBAAyB,CAACW,SAA1B,GAAsCV,KAAK,IAAI;AAC7CA,IAAAA,KAAK,GAAGN,KAAK,CAACY,iBAAN,CAAwBN,KAAxB,CAAR;AAEA,QAAIO,UAAU,GAAGC,OAAO,CAACE,SAAR,CAAkBb,KAAlB,EAAyB,CAACG,KAAD,CAAzB,CAAjB;;AAEA,QAAIO,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAKJ,SAA1C,EAAqD;AACnDI,MAAAA,UAAU,GAAG,IAAb;AACD,KAFD,MAEO;AACLA,MAAAA,UAAU,GAAGf,WAAW,CAAC,WAAD,CAAX,CAAyBe,UAAzB,EAAqC;AAAET,QAAAA,OAAO,EAAEA;AAAX,OAArC,CAAb;AACD;;AACD,WAAOS,UAAP;AACD,GAXD;;AAaAR,EAAAA,yBAAyB,CAACL,KAAK,CAACiB,aAAP,CAAzB,GAAiDd,KAAjD;AACAE,EAAAA,yBAAyB,CAACa,eAA1B,GAA4Cf,KAA5C;AAEA,SAAOE,yBAAP;AACD,CAxCD","sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nexports.convert = (value, { context = \"The provided value\" } = {}) => {\n  function invokeTheCallbackFunction(event) {\n    if (new.target !== undefined) {\n      throw new Error(\"Internal error: invokeTheCallbackFunction is not a constructor\");\n    }\n\n    const thisArg = utils.tryWrapperForImpl(this);\n    let callResult;\n\n    if (typeof value === \"function\") {\n      event = utils.tryWrapperForImpl(event);\n\n      callResult = Reflect.apply(value, thisArg, [event]);\n    }\n\n    if (callResult === null || callResult === undefined) {\n      callResult = null;\n    } else {\n      callResult = conversions[\"DOMString\"](callResult, { context: context });\n    }\n    return callResult;\n  }\n\n  invokeTheCallbackFunction.construct = event => {\n    event = utils.tryWrapperForImpl(event);\n\n    let callResult = Reflect.construct(value, [event]);\n\n    if (callResult === null || callResult === undefined) {\n      callResult = null;\n    } else {\n      callResult = conversions[\"DOMString\"](callResult, { context: context });\n    }\n    return callResult;\n  };\n\n  invokeTheCallbackFunction[utils.wrapperSymbol] = value;\n  invokeTheCallbackFunction.objectReference = value;\n\n  return invokeTheCallbackFunction;\n};\n"]},"metadata":{},"sourceType":"script"}