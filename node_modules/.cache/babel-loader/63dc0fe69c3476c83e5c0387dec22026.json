{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst notImplemented = require(\"../../browser/not-implemented\");\n\nconst idlUtils = require(\"../generated/utils\");\n\nconst {\n  Canvas\n} = require(\"../../utils\");\n\nclass HTMLCanvasElementImpl extends HTMLElementImpl {\n  _attrModified(name, value, oldValue) {\n    if (this._canvas && (name === \"width\" || name === \"height\")) {\n      this._canvas[name] = parseInt(value);\n    }\n\n    super._attrModified(name, value, oldValue);\n  }\n\n  _getCanvas() {\n    if (Canvas && !this._canvas) {\n      this._canvas = Canvas.createCanvas(this.width, this.height);\n    }\n\n    return this._canvas;\n  }\n\n  getContext(contextId) {\n    const canvas = this._getCanvas();\n\n    if (canvas) {\n      if (!this._context) {\n        this._context = canvas.getContext(contextId) || null;\n\n        if (this._context) {\n          // Override the native canvas reference with our wrapper. This is the\n          // reason why we need to locally cache _context, since each call to\n          // canvas.getContext(contextId) would replace this reference again.\n          // Perhaps in the longer term, a better solution would be to create a\n          // full wrapper for the Context object as well.\n          this._context.canvas = idlUtils.wrapperForImpl(this);\n          wrapNodeCanvasMethod(this._context, \"createPattern\");\n          wrapNodeCanvasMethod(this._context, \"drawImage\");\n        }\n      }\n\n      return this._context;\n    }\n\n    notImplemented(\"HTMLCanvasElement.prototype.getContext (without installing the canvas npm package)\", this._ownerDocument._defaultView);\n    return null;\n  }\n\n  toDataURL(...args) {\n    const canvas = this._getCanvas();\n\n    if (canvas) {\n      return canvas.toDataURL(...args);\n    }\n\n    notImplemented(\"HTMLCanvasElement.prototype.toDataURL (without installing the canvas npm package)\", this._ownerDocument._defaultView);\n    return null;\n  }\n\n  toBlob(callback, type, qualityArgument) {\n    const window = this._ownerDocument._defaultView;\n\n    const canvas = this._getCanvas();\n\n    if (canvas) {\n      const options = {};\n\n      switch (type) {\n        case \"image/jpg\":\n        case \"image/jpeg\":\n          type = \"image/jpeg\";\n          options.quality = qualityArgument;\n          break;\n\n        default:\n          type = \"image/png\";\n      }\n\n      canvas.toBuffer((err, buff) => {\n        if (err) {\n          throw err;\n        }\n\n        callback(new window.Blob([buff], {\n          type\n        }));\n      }, type, options);\n    } else {\n      notImplemented(\"HTMLCanvasElement.prototype.toBlob (without installing the canvas npm package)\", window);\n    }\n  }\n\n  get width() {\n    const parsed = parseInt(this.getAttributeNS(null, \"width\"));\n    return isNaN(parsed) || parsed < 0 || parsed > 2147483647 ? 300 : parsed;\n  }\n\n  set width(v) {\n    v = v > 2147483647 ? 300 : v;\n    this.setAttributeNS(null, \"width\", String(v));\n  }\n\n  get height() {\n    const parsed = parseInt(this.getAttributeNS(null, \"height\"));\n    return isNaN(parsed) || parsed < 0 || parsed > 2147483647 ? 150 : parsed;\n  }\n\n  set height(v) {\n    v = v > 2147483647 ? 150 : v;\n    this.setAttributeNS(null, \"height\", String(v));\n  }\n\n} // We need to wrap the methods that receive an image or canvas object\n// (luckily, always as the first argument), so that these objects can be\n// unwrapped an the expected types passed.\n\n\nfunction wrapNodeCanvasMethod(ctx, name) {\n  const prev = ctx[name];\n\n  ctx[name] = function (image, ...rest) {\n    const impl = idlUtils.implForWrapper(image);\n\n    if (impl) {\n      if (impl instanceof HTMLCanvasElementImpl && !impl._canvas) {\n        impl._getCanvas();\n      }\n\n      image = impl._image || impl._canvas;\n    }\n\n    return prev.call(ctx, image, ...rest);\n  };\n}\n\nmodule.exports = {\n  implementation: HTMLCanvasElementImpl\n};","map":{"version":3,"sources":["/Users/kanavmittal/Downloads/Anonymous-Doubt-Session-Application-Ashank-App/node_modules/jsdom/lib/jsdom/living/nodes/HTMLCanvasElement-impl.js"],"names":["HTMLElementImpl","require","implementation","notImplemented","idlUtils","Canvas","HTMLCanvasElementImpl","_attrModified","name","value","oldValue","_canvas","parseInt","_getCanvas","createCanvas","width","height","getContext","contextId","canvas","_context","wrapperForImpl","wrapNodeCanvasMethod","_ownerDocument","_defaultView","toDataURL","args","toBlob","callback","type","qualityArgument","window","options","quality","toBuffer","err","buff","Blob","parsed","getAttributeNS","isNaN","v","setAttributeNS","String","ctx","prev","image","rest","impl","implForWrapper","_image","call","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst notImplemented = require(\"../../browser/not-implemented\");\nconst idlUtils = require(\"../generated/utils\");\nconst { Canvas } = require(\"../../utils\");\n\nclass HTMLCanvasElementImpl extends HTMLElementImpl {\n  _attrModified(name, value, oldValue) {\n    if (this._canvas && (name === \"width\" || name === \"height\")) {\n      this._canvas[name] = parseInt(value);\n    }\n\n    super._attrModified(name, value, oldValue);\n  }\n\n  _getCanvas() {\n    if (Canvas && !this._canvas) {\n      this._canvas = Canvas.createCanvas(this.width, this.height);\n    }\n    return this._canvas;\n  }\n\n  getContext(contextId) {\n    const canvas = this._getCanvas();\n    if (canvas) {\n      if (!this._context) {\n        this._context = canvas.getContext(contextId) || null;\n        if (this._context) {\n          // Override the native canvas reference with our wrapper. This is the\n          // reason why we need to locally cache _context, since each call to\n          // canvas.getContext(contextId) would replace this reference again.\n          // Perhaps in the longer term, a better solution would be to create a\n          // full wrapper for the Context object as well.\n          this._context.canvas = idlUtils.wrapperForImpl(this);\n          wrapNodeCanvasMethod(this._context, \"createPattern\");\n          wrapNodeCanvasMethod(this._context, \"drawImage\");\n        }\n      }\n      return this._context;\n    }\n\n    notImplemented(\n      \"HTMLCanvasElement.prototype.getContext (without installing the canvas npm package)\",\n      this._ownerDocument._defaultView\n    );\n    return null;\n  }\n\n  toDataURL(...args) {\n    const canvas = this._getCanvas();\n    if (canvas) {\n      return canvas.toDataURL(...args);\n    }\n\n    notImplemented(\n      \"HTMLCanvasElement.prototype.toDataURL (without installing the canvas npm package)\",\n      this._ownerDocument._defaultView\n    );\n    return null;\n  }\n\n  toBlob(callback, type, qualityArgument) {\n    const window = this._ownerDocument._defaultView;\n    const canvas = this._getCanvas();\n    if (canvas) {\n      const options = {};\n      switch (type) {\n        case \"image/jpg\":\n        case \"image/jpeg\":\n          type = \"image/jpeg\";\n          options.quality = qualityArgument;\n          break;\n        default:\n          type = \"image/png\";\n      }\n      canvas.toBuffer((err, buff) => {\n        if (err) {\n          throw err;\n        }\n        callback(new window.Blob([buff], { type }));\n      }, type, options);\n    } else {\n      notImplemented(\n        \"HTMLCanvasElement.prototype.toBlob (without installing the canvas npm package)\",\n        window\n      );\n    }\n  }\n\n  get width() {\n    const parsed = parseInt(this.getAttributeNS(null, \"width\"));\n    return isNaN(parsed) || parsed < 0 || parsed > 2147483647 ? 300 : parsed;\n  }\n\n  set width(v) {\n    v = v > 2147483647 ? 300 : v;\n    this.setAttributeNS(null, \"width\", String(v));\n  }\n\n  get height() {\n    const parsed = parseInt(this.getAttributeNS(null, \"height\"));\n    return isNaN(parsed) || parsed < 0 || parsed > 2147483647 ? 150 : parsed;\n  }\n\n  set height(v) {\n    v = v > 2147483647 ? 150 : v;\n    this.setAttributeNS(null, \"height\", String(v));\n  }\n}\n\n// We need to wrap the methods that receive an image or canvas object\n// (luckily, always as the first argument), so that these objects can be\n// unwrapped an the expected types passed.\nfunction wrapNodeCanvasMethod(ctx, name) {\n  const prev = ctx[name];\n  ctx[name] = function (image, ...rest) {\n    const impl = idlUtils.implForWrapper(image);\n    if (impl) {\n      if (impl instanceof HTMLCanvasElementImpl && !impl._canvas) {\n        impl._getCanvas();\n      }\n      image = impl._image || impl._canvas;\n    }\n    return prev.call(ctx, image, ...rest);\n  };\n}\n\nmodule.exports = {\n  implementation: HTMLCanvasElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}