{"ast":null,"code":"\"use strict\";\n\nconst path = require(\"path\");\n\nconst fs = require(\"fs\").promises;\n\nconst vm = require(\"vm\");\n\nconst toughCookie = require(\"tough-cookie\");\n\nconst sniffHTMLEncoding = require(\"html-encoding-sniffer\");\n\nconst whatwgURL = require(\"whatwg-url\");\n\nconst whatwgEncoding = require(\"whatwg-encoding\");\n\nconst {\n  URL\n} = require(\"whatwg-url\");\n\nconst MIMEType = require(\"whatwg-mimetype\");\n\nconst idlUtils = require(\"./jsdom/living/generated/utils.js\");\n\nconst VirtualConsole = require(\"./jsdom/virtual-console.js\");\n\nconst {\n  createWindow\n} = require(\"./jsdom/browser/Window.js\");\n\nconst {\n  parseIntoDocument\n} = require(\"./jsdom/browser/parser\");\n\nconst {\n  fragmentSerialization\n} = require(\"./jsdom/living/domparsing/serialization.js\");\n\nconst ResourceLoader = require(\"./jsdom/browser/resources/resource-loader.js\");\n\nconst NoOpResourceLoader = require(\"./jsdom/browser/resources/no-op-resource-loader.js\");\n\nclass CookieJar extends toughCookie.CookieJar {\n  constructor(store, options) {\n    // jsdom cookie jars must be loose by default\n    super(store, {\n      looseMode: true,\n      ...options\n    });\n  }\n\n}\n\nconst window = Symbol(\"window\");\nlet sharedFragmentDocument = null;\n\nclass JSDOM {\n  constructor(input = \"\", options = {}) {\n    const mimeType = new MIMEType(options.contentType === undefined ? \"text/html\" : options.contentType);\n    const {\n      html,\n      encoding\n    } = normalizeHTML(input, mimeType);\n    options = transformOptions(options, encoding, mimeType);\n    this[window] = createWindow(options.windowOptions);\n    const documentImpl = idlUtils.implForWrapper(this[window]._document);\n    options.beforeParse(this[window]._globalProxy);\n    parseIntoDocument(html, documentImpl);\n    documentImpl.close();\n  }\n\n  get window() {\n    // It's important to grab the global proxy, instead of just the result of `createWindow(...)`, since otherwise\n    // things like `window.eval` don't exist.\n    return this[window]._globalProxy;\n  }\n\n  get virtualConsole() {\n    return this[window]._virtualConsole;\n  }\n\n  get cookieJar() {\n    // TODO NEWAPI move _cookieJar to window probably\n    return idlUtils.implForWrapper(this[window]._document)._cookieJar;\n  }\n\n  serialize() {\n    return fragmentSerialization(idlUtils.implForWrapper(this[window]._document), {\n      requireWellFormed: false\n    });\n  }\n\n  nodeLocation(node) {\n    if (!idlUtils.implForWrapper(this[window]._document)._parseOptions.sourceCodeLocationInfo) {\n      throw new Error(\"Location information was not saved for this jsdom. Use includeNodeLocations during creation.\");\n    }\n\n    return idlUtils.implForWrapper(node).sourceCodeLocation;\n  }\n\n  getInternalVMContext() {\n    if (!vm.isContext(this[window])) {\n      throw new TypeError(\"This jsdom was not configured to allow script running. \" + \"Use the runScripts option during creation.\");\n    }\n\n    return this[window];\n  }\n\n  reconfigure(settings) {\n    if (\"windowTop\" in settings) {\n      this[window]._top = settings.windowTop;\n    }\n\n    if (\"url\" in settings) {\n      const document = idlUtils.implForWrapper(this[window]._document);\n      const url = whatwgURL.parseURL(settings.url);\n\n      if (url === null) {\n        throw new TypeError(`Could not parse \"${settings.url}\" as a URL`);\n      }\n\n      document._URL = url;\n      document._origin = whatwgURL.serializeURLOrigin(document._URL);\n    }\n  }\n\n  static fragment(string = \"\") {\n    if (!sharedFragmentDocument) {\n      sharedFragmentDocument = new JSDOM().window.document;\n    }\n\n    const template = sharedFragmentDocument.createElement(\"template\");\n    template.innerHTML = string;\n    return template.content;\n  }\n\n  static fromURL(url, options = {}) {\n    return Promise.resolve().then(() => {\n      // Remove the hash while sending this through the research loader fetch().\n      // It gets added back a few lines down when constructing the JSDOM object.\n      const parsedURL = new URL(url);\n      const originalHash = parsedURL.hash;\n      parsedURL.hash = \"\";\n      url = parsedURL.href;\n      options = normalizeFromURLOptions(options);\n      const resourceLoader = resourcesToResourceLoader(options.resources);\n      const resourceLoaderForInitialRequest = resourceLoader.constructor === NoOpResourceLoader ? new ResourceLoader() : resourceLoader;\n      const req = resourceLoaderForInitialRequest.fetch(url, {\n        accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n        cookieJar: options.cookieJar,\n        referrer: options.referrer\n      });\n      return req.then(body => {\n        const res = req.response;\n        options = Object.assign(options, {\n          url: req.href + originalHash,\n          contentType: res.headers[\"content-type\"],\n          referrer: req.getHeader(\"referer\")\n        });\n        return new JSDOM(body, options);\n      });\n    });\n  }\n\n  static async fromFile(filename, options = {}) {\n    options = normalizeFromFileOptions(filename, options);\n    const buffer = await fs.readFile(filename);\n    return new JSDOM(buffer, options);\n  }\n\n}\n\nfunction normalizeFromURLOptions(options) {\n  // Checks on options that are invalid for `fromURL`\n  if (options.url !== undefined) {\n    throw new TypeError(\"Cannot supply a url option when using fromURL\");\n  }\n\n  if (options.contentType !== undefined) {\n    throw new TypeError(\"Cannot supply a contentType option when using fromURL\");\n  } // Normalization of options which must be done before the rest of the fromURL code can use them, because they are\n  // given to request()\n\n\n  const normalized = { ...options\n  };\n\n  if (options.referrer !== undefined) {\n    normalized.referrer = new URL(options.referrer).href;\n  }\n\n  if (options.cookieJar === undefined) {\n    normalized.cookieJar = new CookieJar();\n  }\n\n  return normalized; // All other options don't need to be processed yet, and can be taken care of in the normal course of things when\n  // `fromURL` calls `new JSDOM(html, options)`.\n}\n\nfunction normalizeFromFileOptions(filename, options) {\n  const normalized = { ...options\n  };\n\n  if (normalized.contentType === undefined) {\n    const extname = path.extname(filename);\n\n    if (extname === \".xhtml\" || extname === \".xht\" || extname === \".xml\") {\n      normalized.contentType = \"application/xhtml+xml\";\n    }\n  }\n\n  if (normalized.url === undefined) {\n    normalized.url = new URL(\"file:\" + path.resolve(filename));\n  }\n\n  return normalized;\n}\n\nfunction transformOptions(options, encoding, mimeType) {\n  const transformed = {\n    windowOptions: {\n      // Defaults\n      url: \"about:blank\",\n      referrer: \"\",\n      contentType: \"text/html\",\n      parsingMode: \"html\",\n      parseOptions: {\n        sourceCodeLocationInfo: false,\n        scriptingEnabled: false\n      },\n      runScripts: undefined,\n      encoding,\n      pretendToBeVisual: false,\n      storageQuota: 5000000,\n      // Defaults filled in later\n      resourceLoader: undefined,\n      virtualConsole: undefined,\n      cookieJar: undefined\n    },\n\n    // Defaults\n    beforeParse() {}\n\n  }; // options.contentType was parsed into mimeType by the caller.\n\n  if (!mimeType.isHTML() && !mimeType.isXML()) {\n    throw new RangeError(`The given content type of \"${options.contentType}\" was not a HTML or XML content type`);\n  }\n\n  transformed.windowOptions.contentType = mimeType.essence;\n  transformed.windowOptions.parsingMode = mimeType.isHTML() ? \"html\" : \"xml\";\n\n  if (options.url !== undefined) {\n    transformed.windowOptions.url = new URL(options.url).href;\n  }\n\n  if (options.referrer !== undefined) {\n    transformed.windowOptions.referrer = new URL(options.referrer).href;\n  }\n\n  if (options.includeNodeLocations) {\n    if (transformed.windowOptions.parsingMode === \"xml\") {\n      throw new TypeError(\"Cannot set includeNodeLocations to true with an XML content type\");\n    }\n\n    transformed.windowOptions.parseOptions = {\n      sourceCodeLocationInfo: true\n    };\n  }\n\n  transformed.windowOptions.cookieJar = options.cookieJar === undefined ? new CookieJar() : options.cookieJar;\n  transformed.windowOptions.virtualConsole = options.virtualConsole === undefined ? new VirtualConsole().sendTo(console) : options.virtualConsole;\n\n  if (!(transformed.windowOptions.virtualConsole instanceof VirtualConsole)) {\n    throw new TypeError(\"virtualConsole must be an instance of VirtualConsole\");\n  }\n\n  transformed.windowOptions.resourceLoader = resourcesToResourceLoader(options.resources);\n\n  if (options.runScripts !== undefined) {\n    transformed.windowOptions.runScripts = String(options.runScripts);\n\n    if (transformed.windowOptions.runScripts === \"dangerously\") {\n      transformed.windowOptions.parseOptions.scriptingEnabled = true;\n    } else if (transformed.windowOptions.runScripts !== \"outside-only\") {\n      throw new RangeError(`runScripts must be undefined, \"dangerously\", or \"outside-only\"`);\n    }\n  }\n\n  if (options.beforeParse !== undefined) {\n    transformed.beforeParse = options.beforeParse;\n  }\n\n  if (options.pretendToBeVisual !== undefined) {\n    transformed.windowOptions.pretendToBeVisual = Boolean(options.pretendToBeVisual);\n  }\n\n  if (options.storageQuota !== undefined) {\n    transformed.windowOptions.storageQuota = Number(options.storageQuota);\n  } // concurrentNodeIterators??\n\n\n  return transformed;\n}\n\nfunction normalizeHTML(html, mimeType) {\n  let encoding = \"UTF-8\";\n\n  if (ArrayBuffer.isView(html)) {\n    html = Buffer.from(html.buffer, html.byteOffset, html.byteLength);\n  } else if (html instanceof ArrayBuffer) {\n    html = Buffer.from(html);\n  }\n\n  if (Buffer.isBuffer(html)) {\n    encoding = sniffHTMLEncoding(html, {\n      defaultEncoding: mimeType.isXML() ? \"UTF-8\" : \"windows-1252\",\n      transportLayerEncodingLabel: mimeType.parameters.get(\"charset\")\n    });\n    html = whatwgEncoding.decode(html, encoding);\n  } else {\n    html = String(html);\n  }\n\n  return {\n    html,\n    encoding\n  };\n}\n\nfunction resourcesToResourceLoader(resources) {\n  switch (resources) {\n    case undefined:\n      {\n        return new NoOpResourceLoader();\n      }\n\n    case \"usable\":\n      {\n        return new ResourceLoader();\n      }\n\n    default:\n      {\n        if (!(resources instanceof ResourceLoader)) {\n          throw new TypeError(\"resources must be an instance of ResourceLoader\");\n        }\n\n        return resources;\n      }\n  }\n}\n\nexports.JSDOM = JSDOM;\nexports.VirtualConsole = VirtualConsole;\nexports.CookieJar = CookieJar;\nexports.ResourceLoader = ResourceLoader;\nexports.toughCookie = toughCookie;","map":{"version":3,"sources":["/Users/kanavmittal/Downloads/Anonymous-Doubt-Session-Application-Ashank-App/node_modules/jsdom/lib/api.js"],"names":["path","require","fs","promises","vm","toughCookie","sniffHTMLEncoding","whatwgURL","whatwgEncoding","URL","MIMEType","idlUtils","VirtualConsole","createWindow","parseIntoDocument","fragmentSerialization","ResourceLoader","NoOpResourceLoader","CookieJar","constructor","store","options","looseMode","window","Symbol","sharedFragmentDocument","JSDOM","input","mimeType","contentType","undefined","html","encoding","normalizeHTML","transformOptions","windowOptions","documentImpl","implForWrapper","_document","beforeParse","_globalProxy","close","virtualConsole","_virtualConsole","cookieJar","_cookieJar","serialize","requireWellFormed","nodeLocation","node","_parseOptions","sourceCodeLocationInfo","Error","sourceCodeLocation","getInternalVMContext","isContext","TypeError","reconfigure","settings","_top","windowTop","document","url","parseURL","_URL","_origin","serializeURLOrigin","fragment","string","template","createElement","innerHTML","content","fromURL","Promise","resolve","then","parsedURL","originalHash","hash","href","normalizeFromURLOptions","resourceLoader","resourcesToResourceLoader","resources","resourceLoaderForInitialRequest","req","fetch","accept","referrer","body","res","response","Object","assign","headers","getHeader","fromFile","filename","normalizeFromFileOptions","buffer","readFile","normalized","extname","transformed","parsingMode","parseOptions","scriptingEnabled","runScripts","pretendToBeVisual","storageQuota","isHTML","isXML","RangeError","essence","includeNodeLocations","sendTo","console","String","Boolean","Number","ArrayBuffer","isView","Buffer","from","byteOffset","byteLength","isBuffer","defaultEncoding","transportLayerEncodingLabel","parameters","get","decode","exports"],"mappings":"AAAA;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAP,CAAcE,QAAzB;;AACA,MAAMC,EAAE,GAAGH,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,cAAD,CAA3B;;AACA,MAAMK,iBAAiB,GAAGL,OAAO,CAAC,uBAAD,CAAjC;;AACA,MAAMM,SAAS,GAAGN,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMO,cAAc,GAAGP,OAAO,CAAC,iBAAD,CAA9B;;AACA,MAAM;AAAEQ,EAAAA;AAAF,IAAUR,OAAO,CAAC,YAAD,CAAvB;;AACA,MAAMS,QAAQ,GAAGT,OAAO,CAAC,iBAAD,CAAxB;;AACA,MAAMU,QAAQ,GAAGV,OAAO,CAAC,mCAAD,CAAxB;;AACA,MAAMW,cAAc,GAAGX,OAAO,CAAC,4BAAD,CAA9B;;AACA,MAAM;AAAEY,EAAAA;AAAF,IAAmBZ,OAAO,CAAC,2BAAD,CAAhC;;AACA,MAAM;AAAEa,EAAAA;AAAF,IAAwBb,OAAO,CAAC,wBAAD,CAArC;;AACA,MAAM;AAAEc,EAAAA;AAAF,IAA4Bd,OAAO,CAAC,4CAAD,CAAzC;;AACA,MAAMe,cAAc,GAAGf,OAAO,CAAC,8CAAD,CAA9B;;AACA,MAAMgB,kBAAkB,GAAGhB,OAAO,CAAC,oDAAD,CAAlC;;AAEA,MAAMiB,SAAN,SAAwBb,WAAW,CAACa,SAApC,CAA8C;AAC5CC,EAAAA,WAAW,CAACC,KAAD,EAAQC,OAAR,EAAiB;AAC1B;AACA,UAAMD,KAAN,EAAa;AAAEE,MAAAA,SAAS,EAAE,IAAb;AAAmB,SAAGD;AAAtB,KAAb;AACD;;AAJ2C;;AAO9C,MAAME,MAAM,GAAGC,MAAM,CAAC,QAAD,CAArB;AACA,IAAIC,sBAAsB,GAAG,IAA7B;;AAEA,MAAMC,KAAN,CAAY;AACVP,EAAAA,WAAW,CAACQ,KAAK,GAAG,EAAT,EAAaN,OAAO,GAAG,EAAvB,EAA2B;AACpC,UAAMO,QAAQ,GAAG,IAAIlB,QAAJ,CAAaW,OAAO,CAACQ,WAAR,KAAwBC,SAAxB,GAAoC,WAApC,GAAkDT,OAAO,CAACQ,WAAvE,CAAjB;AACA,UAAM;AAAEE,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAqBC,aAAa,CAACN,KAAD,EAAQC,QAAR,CAAxC;AAEAP,IAAAA,OAAO,GAAGa,gBAAgB,CAACb,OAAD,EAAUW,QAAV,EAAoBJ,QAApB,CAA1B;AAEA,SAAKL,MAAL,IAAeV,YAAY,CAACQ,OAAO,CAACc,aAAT,CAA3B;AAEA,UAAMC,YAAY,GAAGzB,QAAQ,CAAC0B,cAAT,CAAwB,KAAKd,MAAL,EAAae,SAArC,CAArB;AAEAjB,IAAAA,OAAO,CAACkB,WAAR,CAAoB,KAAKhB,MAAL,EAAaiB,YAAjC;AAEA1B,IAAAA,iBAAiB,CAACiB,IAAD,EAAOK,YAAP,CAAjB;AAEAA,IAAAA,YAAY,CAACK,KAAb;AACD;;AAES,MAANlB,MAAM,GAAG;AACX;AACA;AACA,WAAO,KAAKA,MAAL,EAAaiB,YAApB;AACD;;AAEiB,MAAdE,cAAc,GAAG;AACnB,WAAO,KAAKnB,MAAL,EAAaoB,eAApB;AACD;;AAEY,MAATC,SAAS,GAAG;AACd;AACA,WAAOjC,QAAQ,CAAC0B,cAAT,CAAwB,KAAKd,MAAL,EAAae,SAArC,EAAgDO,UAAvD;AACD;;AAEDC,EAAAA,SAAS,GAAG;AACV,WAAO/B,qBAAqB,CAACJ,QAAQ,CAAC0B,cAAT,CAAwB,KAAKd,MAAL,EAAae,SAArC,CAAD,EAAkD;AAAES,MAAAA,iBAAiB,EAAE;AAArB,KAAlD,CAA5B;AACD;;AAEDC,EAAAA,YAAY,CAACC,IAAD,EAAO;AACjB,QAAI,CAACtC,QAAQ,CAAC0B,cAAT,CAAwB,KAAKd,MAAL,EAAae,SAArC,EAAgDY,aAAhD,CAA8DC,sBAAnE,EAA2F;AACzF,YAAM,IAAIC,KAAJ,CAAU,8FAAV,CAAN;AACD;;AAED,WAAOzC,QAAQ,CAAC0B,cAAT,CAAwBY,IAAxB,EAA8BI,kBAArC;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrB,QAAI,CAAClD,EAAE,CAACmD,SAAH,CAAa,KAAKhC,MAAL,CAAb,CAAL,EAAiC;AAC/B,YAAM,IAAIiC,SAAJ,CAAc,4DAClB,4CADI,CAAN;AAED;;AAED,WAAO,KAAKjC,MAAL,CAAP;AACD;;AAEDkC,EAAAA,WAAW,CAACC,QAAD,EAAW;AACpB,QAAI,eAAeA,QAAnB,EAA6B;AAC3B,WAAKnC,MAAL,EAAaoC,IAAb,GAAoBD,QAAQ,CAACE,SAA7B;AACD;;AAED,QAAI,SAASF,QAAb,EAAuB;AACrB,YAAMG,QAAQ,GAAGlD,QAAQ,CAAC0B,cAAT,CAAwB,KAAKd,MAAL,EAAae,SAArC,CAAjB;AAEA,YAAMwB,GAAG,GAAGvD,SAAS,CAACwD,QAAV,CAAmBL,QAAQ,CAACI,GAA5B,CAAZ;;AACA,UAAIA,GAAG,KAAK,IAAZ,EAAkB;AAChB,cAAM,IAAIN,SAAJ,CAAe,oBAAmBE,QAAQ,CAACI,GAAI,YAA/C,CAAN;AACD;;AAEDD,MAAAA,QAAQ,CAACG,IAAT,GAAgBF,GAAhB;AACAD,MAAAA,QAAQ,CAACI,OAAT,GAAmB1D,SAAS,CAAC2D,kBAAV,CAA6BL,QAAQ,CAACG,IAAtC,CAAnB;AACD;AACF;;AAEc,SAARG,QAAQ,CAACC,MAAM,GAAG,EAAV,EAAc;AAC3B,QAAI,CAAC3C,sBAAL,EAA6B;AAC3BA,MAAAA,sBAAsB,GAAI,IAAIC,KAAJ,EAAD,CAAcH,MAAd,CAAqBsC,QAA9C;AACD;;AAED,UAAMQ,QAAQ,GAAG5C,sBAAsB,CAAC6C,aAAvB,CAAqC,UAArC,CAAjB;AACAD,IAAAA,QAAQ,CAACE,SAAT,GAAqBH,MAArB;AACA,WAAOC,QAAQ,CAACG,OAAhB;AACD;;AAEa,SAAPC,OAAO,CAACX,GAAD,EAAMzC,OAAO,GAAG,EAAhB,EAAoB;AAChC,WAAOqD,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,MAAM;AAClC;AACA;AACA,YAAMC,SAAS,GAAG,IAAIpE,GAAJ,CAAQqD,GAAR,CAAlB;AACA,YAAMgB,YAAY,GAAGD,SAAS,CAACE,IAA/B;AACAF,MAAAA,SAAS,CAACE,IAAV,GAAiB,EAAjB;AACAjB,MAAAA,GAAG,GAAGe,SAAS,CAACG,IAAhB;AAEA3D,MAAAA,OAAO,GAAG4D,uBAAuB,CAAC5D,OAAD,CAAjC;AAEA,YAAM6D,cAAc,GAAGC,yBAAyB,CAAC9D,OAAO,CAAC+D,SAAT,CAAhD;AACA,YAAMC,+BAA+B,GAAGH,cAAc,CAAC/D,WAAf,KAA+BF,kBAA/B,GACtC,IAAID,cAAJ,EADsC,GAEtCkE,cAFF;AAIA,YAAMI,GAAG,GAAGD,+BAA+B,CAACE,KAAhC,CAAsCzB,GAAtC,EAA2C;AACrD0B,QAAAA,MAAM,EAAE,iEAD6C;AAErD5C,QAAAA,SAAS,EAAEvB,OAAO,CAACuB,SAFkC;AAGrD6C,QAAAA,QAAQ,EAAEpE,OAAO,CAACoE;AAHmC,OAA3C,CAAZ;AAMA,aAAOH,GAAG,CAACV,IAAJ,CAASc,IAAI,IAAI;AACtB,cAAMC,GAAG,GAAGL,GAAG,CAACM,QAAhB;AAEAvE,QAAAA,OAAO,GAAGwE,MAAM,CAACC,MAAP,CAAczE,OAAd,EAAuB;AAC/ByC,UAAAA,GAAG,EAAEwB,GAAG,CAACN,IAAJ,GAAWF,YADe;AAE/BjD,UAAAA,WAAW,EAAE8D,GAAG,CAACI,OAAJ,CAAY,cAAZ,CAFkB;AAG/BN,UAAAA,QAAQ,EAAEH,GAAG,CAACU,SAAJ,CAAc,SAAd;AAHqB,SAAvB,CAAV;AAMA,eAAO,IAAItE,KAAJ,CAAUgE,IAAV,EAAgBrE,OAAhB,CAAP;AACD,OAVM,CAAP;AAWD,KAhCM,CAAP;AAiCD;;AAEoB,eAAR4E,QAAQ,CAACC,QAAD,EAAW7E,OAAO,GAAG,EAArB,EAAyB;AAC5CA,IAAAA,OAAO,GAAG8E,wBAAwB,CAACD,QAAD,EAAW7E,OAAX,CAAlC;AACA,UAAM+E,MAAM,GAAG,MAAMlG,EAAE,CAACmG,QAAH,CAAYH,QAAZ,CAArB;AAEA,WAAO,IAAIxE,KAAJ,CAAU0E,MAAV,EAAkB/E,OAAlB,CAAP;AACD;;AA3HS;;AA8HZ,SAAS4D,uBAAT,CAAiC5D,OAAjC,EAA0C;AACxC;AACA,MAAIA,OAAO,CAACyC,GAAR,KAAgBhC,SAApB,EAA+B;AAC7B,UAAM,IAAI0B,SAAJ,CAAc,+CAAd,CAAN;AACD;;AACD,MAAInC,OAAO,CAACQ,WAAR,KAAwBC,SAA5B,EAAuC;AACrC,UAAM,IAAI0B,SAAJ,CAAc,uDAAd,CAAN;AACD,GAPuC,CASxC;AACA;;;AACA,QAAM8C,UAAU,GAAG,EAAE,GAAGjF;AAAL,GAAnB;;AAEA,MAAIA,OAAO,CAACoE,QAAR,KAAqB3D,SAAzB,EAAoC;AAClCwE,IAAAA,UAAU,CAACb,QAAX,GAAuB,IAAIhF,GAAJ,CAAQY,OAAO,CAACoE,QAAhB,CAAD,CAA4BT,IAAlD;AACD;;AAED,MAAI3D,OAAO,CAACuB,SAAR,KAAsBd,SAA1B,EAAqC;AACnCwE,IAAAA,UAAU,CAAC1D,SAAX,GAAuB,IAAI1B,SAAJ,EAAvB;AACD;;AAED,SAAOoF,UAAP,CArBwC,CAuBxC;AACA;AACD;;AAED,SAASH,wBAAT,CAAkCD,QAAlC,EAA4C7E,OAA5C,EAAqD;AACnD,QAAMiF,UAAU,GAAG,EAAE,GAAGjF;AAAL,GAAnB;;AAEA,MAAIiF,UAAU,CAACzE,WAAX,KAA2BC,SAA/B,EAA0C;AACxC,UAAMyE,OAAO,GAAGvG,IAAI,CAACuG,OAAL,CAAaL,QAAb,CAAhB;;AACA,QAAIK,OAAO,KAAK,QAAZ,IAAwBA,OAAO,KAAK,MAApC,IAA8CA,OAAO,KAAK,MAA9D,EAAsE;AACpED,MAAAA,UAAU,CAACzE,WAAX,GAAyB,uBAAzB;AACD;AACF;;AAED,MAAIyE,UAAU,CAACxC,GAAX,KAAmBhC,SAAvB,EAAkC;AAChCwE,IAAAA,UAAU,CAACxC,GAAX,GAAiB,IAAIrD,GAAJ,CAAQ,UAAUT,IAAI,CAAC2E,OAAL,CAAauB,QAAb,CAAlB,CAAjB;AACD;;AAED,SAAOI,UAAP;AACD;;AAED,SAASpE,gBAAT,CAA0Bb,OAA1B,EAAmCW,QAAnC,EAA6CJ,QAA7C,EAAuD;AACrD,QAAM4E,WAAW,GAAG;AAClBrE,IAAAA,aAAa,EAAE;AACb;AACA2B,MAAAA,GAAG,EAAE,aAFQ;AAGb2B,MAAAA,QAAQ,EAAE,EAHG;AAIb5D,MAAAA,WAAW,EAAE,WAJA;AAKb4E,MAAAA,WAAW,EAAE,MALA;AAMbC,MAAAA,YAAY,EAAE;AACZvD,QAAAA,sBAAsB,EAAE,KADZ;AAEZwD,QAAAA,gBAAgB,EAAE;AAFN,OAND;AAUbC,MAAAA,UAAU,EAAE9E,SAVC;AAWbE,MAAAA,QAXa;AAYb6E,MAAAA,iBAAiB,EAAE,KAZN;AAabC,MAAAA,YAAY,EAAE,OAbD;AAeb;AACA5B,MAAAA,cAAc,EAAEpD,SAhBH;AAiBbY,MAAAA,cAAc,EAAEZ,SAjBH;AAkBbc,MAAAA,SAAS,EAAEd;AAlBE,KADG;;AAsBlB;AACAS,IAAAA,WAAW,GAAG,CAAG;;AAvBC,GAApB,CADqD,CA2BrD;;AACA,MAAI,CAACX,QAAQ,CAACmF,MAAT,EAAD,IAAsB,CAACnF,QAAQ,CAACoF,KAAT,EAA3B,EAA6C;AAC3C,UAAM,IAAIC,UAAJ,CAAgB,8BAA6B5F,OAAO,CAACQ,WAAY,sCAAjE,CAAN;AACD;;AAED2E,EAAAA,WAAW,CAACrE,aAAZ,CAA0BN,WAA1B,GAAwCD,QAAQ,CAACsF,OAAjD;AACAV,EAAAA,WAAW,CAACrE,aAAZ,CAA0BsE,WAA1B,GAAwC7E,QAAQ,CAACmF,MAAT,KAAoB,MAApB,GAA6B,KAArE;;AAEA,MAAI1F,OAAO,CAACyC,GAAR,KAAgBhC,SAApB,EAA+B;AAC7B0E,IAAAA,WAAW,CAACrE,aAAZ,CAA0B2B,GAA1B,GAAiC,IAAIrD,GAAJ,CAAQY,OAAO,CAACyC,GAAhB,CAAD,CAAuBkB,IAAvD;AACD;;AAED,MAAI3D,OAAO,CAACoE,QAAR,KAAqB3D,SAAzB,EAAoC;AAClC0E,IAAAA,WAAW,CAACrE,aAAZ,CAA0BsD,QAA1B,GAAsC,IAAIhF,GAAJ,CAAQY,OAAO,CAACoE,QAAhB,CAAD,CAA4BT,IAAjE;AACD;;AAED,MAAI3D,OAAO,CAAC8F,oBAAZ,EAAkC;AAChC,QAAIX,WAAW,CAACrE,aAAZ,CAA0BsE,WAA1B,KAA0C,KAA9C,EAAqD;AACnD,YAAM,IAAIjD,SAAJ,CAAc,kEAAd,CAAN;AACD;;AAEDgD,IAAAA,WAAW,CAACrE,aAAZ,CAA0BuE,YAA1B,GAAyC;AAAEvD,MAAAA,sBAAsB,EAAE;AAA1B,KAAzC;AACD;;AAEDqD,EAAAA,WAAW,CAACrE,aAAZ,CAA0BS,SAA1B,GAAsCvB,OAAO,CAACuB,SAAR,KAAsBd,SAAtB,GACD,IAAIZ,SAAJ,EADC,GAEDG,OAAO,CAACuB,SAF7C;AAIA4D,EAAAA,WAAW,CAACrE,aAAZ,CAA0BO,cAA1B,GAA2CrB,OAAO,CAACqB,cAAR,KAA2BZ,SAA3B,GACA,IAAIlB,cAAJ,EAAD,CAAuBwG,MAAvB,CAA8BC,OAA9B,CADC,GAEDhG,OAAO,CAACqB,cAFlD;;AAIA,MAAI,EAAE8D,WAAW,CAACrE,aAAZ,CAA0BO,cAA1B,YAAoD9B,cAAtD,CAAJ,EAA2E;AACzE,UAAM,IAAI4C,SAAJ,CAAc,sDAAd,CAAN;AACD;;AAEDgD,EAAAA,WAAW,CAACrE,aAAZ,CAA0B+C,cAA1B,GAA2CC,yBAAyB,CAAC9D,OAAO,CAAC+D,SAAT,CAApE;;AAEA,MAAI/D,OAAO,CAACuF,UAAR,KAAuB9E,SAA3B,EAAsC;AACpC0E,IAAAA,WAAW,CAACrE,aAAZ,CAA0ByE,UAA1B,GAAuCU,MAAM,CAACjG,OAAO,CAACuF,UAAT,CAA7C;;AACA,QAAIJ,WAAW,CAACrE,aAAZ,CAA0ByE,UAA1B,KAAyC,aAA7C,EAA4D;AAC1DJ,MAAAA,WAAW,CAACrE,aAAZ,CAA0BuE,YAA1B,CAAuCC,gBAAvC,GAA0D,IAA1D;AACD,KAFD,MAEO,IAAIH,WAAW,CAACrE,aAAZ,CAA0ByE,UAA1B,KAAyC,cAA7C,EAA6D;AAClE,YAAM,IAAIK,UAAJ,CAAgB,gEAAhB,CAAN;AACD;AACF;;AAED,MAAI5F,OAAO,CAACkB,WAAR,KAAwBT,SAA5B,EAAuC;AACrC0E,IAAAA,WAAW,CAACjE,WAAZ,GAA0BlB,OAAO,CAACkB,WAAlC;AACD;;AAED,MAAIlB,OAAO,CAACwF,iBAAR,KAA8B/E,SAAlC,EAA6C;AAC3C0E,IAAAA,WAAW,CAACrE,aAAZ,CAA0B0E,iBAA1B,GAA8CU,OAAO,CAAClG,OAAO,CAACwF,iBAAT,CAArD;AACD;;AAED,MAAIxF,OAAO,CAACyF,YAAR,KAAyBhF,SAA7B,EAAwC;AACtC0E,IAAAA,WAAW,CAACrE,aAAZ,CAA0B2E,YAA1B,GAAyCU,MAAM,CAACnG,OAAO,CAACyF,YAAT,CAA/C;AACD,GApFoD,CAsFrD;;;AAEA,SAAON,WAAP;AACD;;AAED,SAASvE,aAAT,CAAuBF,IAAvB,EAA6BH,QAA7B,EAAuC;AACrC,MAAII,QAAQ,GAAG,OAAf;;AAEA,MAAIyF,WAAW,CAACC,MAAZ,CAAmB3F,IAAnB,CAAJ,EAA8B;AAC5BA,IAAAA,IAAI,GAAG4F,MAAM,CAACC,IAAP,CAAY7F,IAAI,CAACqE,MAAjB,EAAyBrE,IAAI,CAAC8F,UAA9B,EAA0C9F,IAAI,CAAC+F,UAA/C,CAAP;AACD,GAFD,MAEO,IAAI/F,IAAI,YAAY0F,WAApB,EAAiC;AACtC1F,IAAAA,IAAI,GAAG4F,MAAM,CAACC,IAAP,CAAY7F,IAAZ,CAAP;AACD;;AAED,MAAI4F,MAAM,CAACI,QAAP,CAAgBhG,IAAhB,CAAJ,EAA2B;AACzBC,IAAAA,QAAQ,GAAG1B,iBAAiB,CAACyB,IAAD,EAAO;AACjCiG,MAAAA,eAAe,EAAEpG,QAAQ,CAACoF,KAAT,KAAmB,OAAnB,GAA6B,cADb;AAEjCiB,MAAAA,2BAA2B,EAAErG,QAAQ,CAACsG,UAAT,CAAoBC,GAApB,CAAwB,SAAxB;AAFI,KAAP,CAA5B;AAIApG,IAAAA,IAAI,GAAGvB,cAAc,CAAC4H,MAAf,CAAsBrG,IAAtB,EAA4BC,QAA5B,CAAP;AACD,GAND,MAMO;AACLD,IAAAA,IAAI,GAAGuF,MAAM,CAACvF,IAAD,CAAb;AACD;;AAED,SAAO;AAAEA,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAP;AACD;;AAED,SAASmD,yBAAT,CAAmCC,SAAnC,EAA8C;AAC5C,UAAQA,SAAR;AACE,SAAKtD,SAAL;AAAgB;AACd,eAAO,IAAIb,kBAAJ,EAAP;AACD;;AACD,SAAK,QAAL;AAAe;AACb,eAAO,IAAID,cAAJ,EAAP;AACD;;AACD;AAAS;AACP,YAAI,EAAEoE,SAAS,YAAYpE,cAAvB,CAAJ,EAA4C;AAC1C,gBAAM,IAAIwC,SAAJ,CAAc,iDAAd,CAAN;AACD;;AACD,eAAO4B,SAAP;AACD;AAZH;AAcD;;AAEDiD,OAAO,CAAC3G,KAAR,GAAgBA,KAAhB;AAEA2G,OAAO,CAACzH,cAAR,GAAyBA,cAAzB;AACAyH,OAAO,CAACnH,SAAR,GAAoBA,SAApB;AACAmH,OAAO,CAACrH,cAAR,GAAyBA,cAAzB;AAEAqH,OAAO,CAAChI,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\nconst path = require(\"path\");\nconst fs = require(\"fs\").promises;\nconst vm = require(\"vm\");\nconst toughCookie = require(\"tough-cookie\");\nconst sniffHTMLEncoding = require(\"html-encoding-sniffer\");\nconst whatwgURL = require(\"whatwg-url\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst { URL } = require(\"whatwg-url\");\nconst MIMEType = require(\"whatwg-mimetype\");\nconst idlUtils = require(\"./jsdom/living/generated/utils.js\");\nconst VirtualConsole = require(\"./jsdom/virtual-console.js\");\nconst { createWindow } = require(\"./jsdom/browser/Window.js\");\nconst { parseIntoDocument } = require(\"./jsdom/browser/parser\");\nconst { fragmentSerialization } = require(\"./jsdom/living/domparsing/serialization.js\");\nconst ResourceLoader = require(\"./jsdom/browser/resources/resource-loader.js\");\nconst NoOpResourceLoader = require(\"./jsdom/browser/resources/no-op-resource-loader.js\");\n\nclass CookieJar extends toughCookie.CookieJar {\n  constructor(store, options) {\n    // jsdom cookie jars must be loose by default\n    super(store, { looseMode: true, ...options });\n  }\n}\n\nconst window = Symbol(\"window\");\nlet sharedFragmentDocument = null;\n\nclass JSDOM {\n  constructor(input = \"\", options = {}) {\n    const mimeType = new MIMEType(options.contentType === undefined ? \"text/html\" : options.contentType);\n    const { html, encoding } = normalizeHTML(input, mimeType);\n\n    options = transformOptions(options, encoding, mimeType);\n\n    this[window] = createWindow(options.windowOptions);\n\n    const documentImpl = idlUtils.implForWrapper(this[window]._document);\n\n    options.beforeParse(this[window]._globalProxy);\n\n    parseIntoDocument(html, documentImpl);\n\n    documentImpl.close();\n  }\n\n  get window() {\n    // It's important to grab the global proxy, instead of just the result of `createWindow(...)`, since otherwise\n    // things like `window.eval` don't exist.\n    return this[window]._globalProxy;\n  }\n\n  get virtualConsole() {\n    return this[window]._virtualConsole;\n  }\n\n  get cookieJar() {\n    // TODO NEWAPI move _cookieJar to window probably\n    return idlUtils.implForWrapper(this[window]._document)._cookieJar;\n  }\n\n  serialize() {\n    return fragmentSerialization(idlUtils.implForWrapper(this[window]._document), { requireWellFormed: false });\n  }\n\n  nodeLocation(node) {\n    if (!idlUtils.implForWrapper(this[window]._document)._parseOptions.sourceCodeLocationInfo) {\n      throw new Error(\"Location information was not saved for this jsdom. Use includeNodeLocations during creation.\");\n    }\n\n    return idlUtils.implForWrapper(node).sourceCodeLocation;\n  }\n\n  getInternalVMContext() {\n    if (!vm.isContext(this[window])) {\n      throw new TypeError(\"This jsdom was not configured to allow script running. \" +\n        \"Use the runScripts option during creation.\");\n    }\n\n    return this[window];\n  }\n\n  reconfigure(settings) {\n    if (\"windowTop\" in settings) {\n      this[window]._top = settings.windowTop;\n    }\n\n    if (\"url\" in settings) {\n      const document = idlUtils.implForWrapper(this[window]._document);\n\n      const url = whatwgURL.parseURL(settings.url);\n      if (url === null) {\n        throw new TypeError(`Could not parse \"${settings.url}\" as a URL`);\n      }\n\n      document._URL = url;\n      document._origin = whatwgURL.serializeURLOrigin(document._URL);\n    }\n  }\n\n  static fragment(string = \"\") {\n    if (!sharedFragmentDocument) {\n      sharedFragmentDocument = (new JSDOM()).window.document;\n    }\n\n    const template = sharedFragmentDocument.createElement(\"template\");\n    template.innerHTML = string;\n    return template.content;\n  }\n\n  static fromURL(url, options = {}) {\n    return Promise.resolve().then(() => {\n      // Remove the hash while sending this through the research loader fetch().\n      // It gets added back a few lines down when constructing the JSDOM object.\n      const parsedURL = new URL(url);\n      const originalHash = parsedURL.hash;\n      parsedURL.hash = \"\";\n      url = parsedURL.href;\n\n      options = normalizeFromURLOptions(options);\n\n      const resourceLoader = resourcesToResourceLoader(options.resources);\n      const resourceLoaderForInitialRequest = resourceLoader.constructor === NoOpResourceLoader ?\n        new ResourceLoader() :\n        resourceLoader;\n\n      const req = resourceLoaderForInitialRequest.fetch(url, {\n        accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n        cookieJar: options.cookieJar,\n        referrer: options.referrer\n      });\n\n      return req.then(body => {\n        const res = req.response;\n\n        options = Object.assign(options, {\n          url: req.href + originalHash,\n          contentType: res.headers[\"content-type\"],\n          referrer: req.getHeader(\"referer\")\n        });\n\n        return new JSDOM(body, options);\n      });\n    });\n  }\n\n  static async fromFile(filename, options = {}) {\n    options = normalizeFromFileOptions(filename, options);\n    const buffer = await fs.readFile(filename);\n\n    return new JSDOM(buffer, options);\n  }\n}\n\nfunction normalizeFromURLOptions(options) {\n  // Checks on options that are invalid for `fromURL`\n  if (options.url !== undefined) {\n    throw new TypeError(\"Cannot supply a url option when using fromURL\");\n  }\n  if (options.contentType !== undefined) {\n    throw new TypeError(\"Cannot supply a contentType option when using fromURL\");\n  }\n\n  // Normalization of options which must be done before the rest of the fromURL code can use them, because they are\n  // given to request()\n  const normalized = { ...options };\n\n  if (options.referrer !== undefined) {\n    normalized.referrer = (new URL(options.referrer)).href;\n  }\n\n  if (options.cookieJar === undefined) {\n    normalized.cookieJar = new CookieJar();\n  }\n\n  return normalized;\n\n  // All other options don't need to be processed yet, and can be taken care of in the normal course of things when\n  // `fromURL` calls `new JSDOM(html, options)`.\n}\n\nfunction normalizeFromFileOptions(filename, options) {\n  const normalized = { ...options };\n\n  if (normalized.contentType === undefined) {\n    const extname = path.extname(filename);\n    if (extname === \".xhtml\" || extname === \".xht\" || extname === \".xml\") {\n      normalized.contentType = \"application/xhtml+xml\";\n    }\n  }\n\n  if (normalized.url === undefined) {\n    normalized.url = new URL(\"file:\" + path.resolve(filename));\n  }\n\n  return normalized;\n}\n\nfunction transformOptions(options, encoding, mimeType) {\n  const transformed = {\n    windowOptions: {\n      // Defaults\n      url: \"about:blank\",\n      referrer: \"\",\n      contentType: \"text/html\",\n      parsingMode: \"html\",\n      parseOptions: {\n        sourceCodeLocationInfo: false,\n        scriptingEnabled: false\n      },\n      runScripts: undefined,\n      encoding,\n      pretendToBeVisual: false,\n      storageQuota: 5000000,\n\n      // Defaults filled in later\n      resourceLoader: undefined,\n      virtualConsole: undefined,\n      cookieJar: undefined\n    },\n\n    // Defaults\n    beforeParse() { }\n  };\n\n  // options.contentType was parsed into mimeType by the caller.\n  if (!mimeType.isHTML() && !mimeType.isXML()) {\n    throw new RangeError(`The given content type of \"${options.contentType}\" was not a HTML or XML content type`);\n  }\n\n  transformed.windowOptions.contentType = mimeType.essence;\n  transformed.windowOptions.parsingMode = mimeType.isHTML() ? \"html\" : \"xml\";\n\n  if (options.url !== undefined) {\n    transformed.windowOptions.url = (new URL(options.url)).href;\n  }\n\n  if (options.referrer !== undefined) {\n    transformed.windowOptions.referrer = (new URL(options.referrer)).href;\n  }\n\n  if (options.includeNodeLocations) {\n    if (transformed.windowOptions.parsingMode === \"xml\") {\n      throw new TypeError(\"Cannot set includeNodeLocations to true with an XML content type\");\n    }\n\n    transformed.windowOptions.parseOptions = { sourceCodeLocationInfo: true };\n  }\n\n  transformed.windowOptions.cookieJar = options.cookieJar === undefined ?\n                                       new CookieJar() :\n                                       options.cookieJar;\n\n  transformed.windowOptions.virtualConsole = options.virtualConsole === undefined ?\n                                            (new VirtualConsole()).sendTo(console) :\n                                            options.virtualConsole;\n\n  if (!(transformed.windowOptions.virtualConsole instanceof VirtualConsole)) {\n    throw new TypeError(\"virtualConsole must be an instance of VirtualConsole\");\n  }\n\n  transformed.windowOptions.resourceLoader = resourcesToResourceLoader(options.resources);\n\n  if (options.runScripts !== undefined) {\n    transformed.windowOptions.runScripts = String(options.runScripts);\n    if (transformed.windowOptions.runScripts === \"dangerously\") {\n      transformed.windowOptions.parseOptions.scriptingEnabled = true;\n    } else if (transformed.windowOptions.runScripts !== \"outside-only\") {\n      throw new RangeError(`runScripts must be undefined, \"dangerously\", or \"outside-only\"`);\n    }\n  }\n\n  if (options.beforeParse !== undefined) {\n    transformed.beforeParse = options.beforeParse;\n  }\n\n  if (options.pretendToBeVisual !== undefined) {\n    transformed.windowOptions.pretendToBeVisual = Boolean(options.pretendToBeVisual);\n  }\n\n  if (options.storageQuota !== undefined) {\n    transformed.windowOptions.storageQuota = Number(options.storageQuota);\n  }\n\n  // concurrentNodeIterators??\n\n  return transformed;\n}\n\nfunction normalizeHTML(html, mimeType) {\n  let encoding = \"UTF-8\";\n\n  if (ArrayBuffer.isView(html)) {\n    html = Buffer.from(html.buffer, html.byteOffset, html.byteLength);\n  } else if (html instanceof ArrayBuffer) {\n    html = Buffer.from(html);\n  }\n\n  if (Buffer.isBuffer(html)) {\n    encoding = sniffHTMLEncoding(html, {\n      defaultEncoding: mimeType.isXML() ? \"UTF-8\" : \"windows-1252\",\n      transportLayerEncodingLabel: mimeType.parameters.get(\"charset\")\n    });\n    html = whatwgEncoding.decode(html, encoding);\n  } else {\n    html = String(html);\n  }\n\n  return { html, encoding };\n}\n\nfunction resourcesToResourceLoader(resources) {\n  switch (resources) {\n    case undefined: {\n      return new NoOpResourceLoader();\n    }\n    case \"usable\": {\n      return new ResourceLoader();\n    }\n    default: {\n      if (!(resources instanceof ResourceLoader)) {\n        throw new TypeError(\"resources must be an instance of ResourceLoader\");\n      }\n      return resources;\n    }\n  }\n}\n\nexports.JSDOM = JSDOM;\n\nexports.VirtualConsole = VirtualConsole;\nexports.CookieJar = CookieJar;\nexports.ResourceLoader = ResourceLoader;\n\nexports.toughCookie = toughCookie;\n"]},"metadata":{},"sourceType":"script"}