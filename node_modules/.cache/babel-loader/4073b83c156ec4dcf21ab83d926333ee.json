{"ast":null,"code":"var _jsxFileName = \"/Users/kanavmittal/Downloads/Anonymous-Doubt-Session-Application-Ashank-App/src/components/SpeechToText/SpeechToText.jsx\";\nimport React, { Component } from \"react\";\nimport SpeechToText from \"speech-to-text\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst styles = theme => ({\n  root: {\n    paddingTop: 65,\n    paddingLeft: 11,\n    paddingRight: 11\n  },\n  flex: {\n    flex: 1\n  },\n  grow: {\n    flexGrow: 1\n  },\n  paper: theme.mixins.gutters({\n    paddingTop: 22,\n    paddingBottom: 22\n  })\n});\n\nclass SpeechToTextDemo extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      error: \"\",\n      interimText: \"\",\n      finalisedText: [],\n      listening: false,\n      language: \"en-US\"\n    };\n\n    this.onAnythingSaid = text => {\n      this.setState({\n        interimText: text\n      });\n    };\n\n    this.onEndEvent = () => {\n      if (!isWidthUp(\"sm\", this.props.width)) {\n        this.setState({\n          listening: false\n        });\n      } else if (this.state.listening) {\n        this.startListening();\n      }\n    };\n\n    this.onFinalised = text => {\n      this.setState({\n        finalisedText: [text, ...this.state.finalisedText],\n        interimText: \"\"\n      });\n    };\n\n    this.startListening = () => {\n      try {\n        this.listener = new SpeechToText(this.onFinalised, this.onEndEvent, this.onAnythingSaid, this.state.language);\n        this.listener.startListening();\n        this.setState({\n          listening: true\n        });\n      } catch (err) {\n        console.log(\"yoyoy\");\n        console.log(err);\n      }\n    };\n\n    this.stopListening = () => {\n      this.listener.stopListening();\n      this.setState({\n        listening: false\n      });\n    };\n  }\n\n  render() {\n    const {\n      error,\n      interimText,\n      finalisedText,\n      listening,\n      language\n    } = this.state;\n    const {\n      classes\n    } = this.props;\n    let content;\n\n    if (error) {\n      content = /*#__PURE__*/_jsxDEV(Paper, {\n        className: classes.paper,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this);\n    } else {\n      let buttonForListening;\n\n      if (listening) {\n        buttonForListening = /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => this.stopListening(),\n          children: \"Stop Listening\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this);\n      } else {\n        buttonForListening = /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => this.startListening(),\n          variant: \"contained\",\n          children: \"Start Listening\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this);\n      }\n\n      content = /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 16,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: this.props.classes.paper\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 7,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 16,\n            children: [buttonForListening, /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              lg: 6,\n              children: /*#__PURE__*/_jsxDEV(FormControl, {\n                className: classes.formControl,\n                children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                  children: \"Language\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 112,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Select, {\n                  value: language,\n                  onChange: evt => this.setState({\n                    language: evt.target.value\n                  }),\n                  disabled: listening,\n                  children: supportedLanguages.map(language => /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: language[1],\n                    children: language[0]\n                  }, language[1], false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 121,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 113,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n                  children: \"What language are you going to speak in?\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), finalisedText.map((str, index) => {\n          return {\n            str\n          };\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nexport default withWidth()(withStyles(styles)(SpeechToTextDemo));","map":{"version":3,"sources":["/Users/kanavmittal/Downloads/Anonymous-Doubt-Session-Application-Ashank-App/src/components/SpeechToText/SpeechToText.jsx"],"names":["React","Component","SpeechToText","styles","theme","root","paddingTop","paddingLeft","paddingRight","flex","grow","flexGrow","paper","mixins","gutters","paddingBottom","SpeechToTextDemo","state","error","interimText","finalisedText","listening","language","onAnythingSaid","text","setState","onEndEvent","isWidthUp","props","width","startListening","onFinalised","listener","err","console","log","stopListening","render","classes","content","buttonForListening","formControl","evt","target","value","supportedLanguages","map","str","index","withWidth","withStyles"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SpeechToText from \"speech-to-text\";\n\nconst styles = (theme) => ({\n  root: {\n    paddingTop: 65,\n    paddingLeft: 11,\n    paddingRight: 11,\n  },\n  flex: {\n    flex: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  paper: theme.mixins.gutters({\n    paddingTop: 22,\n    paddingBottom: 22,\n  }),\n});\n\nclass SpeechToTextDemo extends Component {\n  state = {\n    error: \"\",\n    interimText: \"\",\n    finalisedText: [],\n    listening: false,\n    language: \"en-US\",\n  };\n\n  onAnythingSaid = (text) => {\n    this.setState({ interimText: text });\n  };\n\n  onEndEvent = () => {\n    if (!isWidthUp(\"sm\", this.props.width)) {\n      this.setState({ listening: false });\n    } else if (this.state.listening) {\n      this.startListening();\n    }\n  };\n\n  onFinalised = (text) => {\n    this.setState({\n      finalisedText: [text, ...this.state.finalisedText],\n      interimText: \"\",\n    });\n  };\n\n  startListening = () => {\n    try {\n      this.listener = new SpeechToText(\n        this.onFinalised,\n        this.onEndEvent,\n        this.onAnythingSaid,\n        this.state.language\n      );\n      this.listener.startListening();\n      this.setState({ listening: true });\n    } catch (err) {\n      console.log(\"yoyoy\");\n      console.log(err);\n    }\n  };\n\n  stopListening = () => {\n    this.listener.stopListening();\n    this.setState({ listening: false });\n  };\n\n  render() {\n    const {\n      error,\n      interimText,\n      finalisedText,\n      listening,\n      language,\n    } = this.state;\n    const { classes } = this.props;\n    let content;\n    if (error) {\n      content = (\n        <Paper className={classes.paper}>\n          <Typography variant=\"h6\" gutterBottom>\n            {error}\n          </Typography>\n        </Paper>\n      );\n    } else {\n      let buttonForListening;\n\n      if (listening) {\n        buttonForListening = (\n          <Button onClick={() => this.stopListening()}>Stop Listening</Button>\n        );\n      } else {\n        buttonForListening = (\n          <Button onClick={() => this.startListening()} variant=\"contained\">\n            Start Listening\n          </Button>\n        );\n      }\n      content = (\n        <Grid container spacing={16}>\n          <div className={this.props.classes.paper}></div>\n          <Grid item xs={12} md={7}>\n            <Grid container spacing={16}>\n              {buttonForListening}\n\n              <Grid item xs={12} lg={6}>\n                <FormControl className={classes.formControl}>\n                  <InputLabel>Language</InputLabel>\n                  <Select\n                    value={language}\n                    onChange={(evt) =>\n                      this.setState({ language: evt.target.value })\n                    }\n                    disabled={listening}\n                  >\n                    {supportedLanguages.map((language) => (\n                      <MenuItem key={language[1]} value={language[1]}>\n                        {language[0]}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                  <FormHelperText>\n                    What language are you going to speak in?\n                  </FormHelperText>\n                </FormControl>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          {finalisedText.map((str, index) => {\n            return { str };\n          })}\n        </Grid>\n      );\n    }\n\n    return <Grid container>{content}</Grid>;\n  }\n}\n\nexport default withWidth()(withStyles(styles)(SpeechToTextDemo));\n"]},"metadata":{},"sourceType":"module"}